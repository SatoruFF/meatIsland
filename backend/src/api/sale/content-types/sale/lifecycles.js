const axios = require("axios");

const optSale = 10000

module.exports = {
  async afterCreate(event) {
    const { result } = event;

    const chatId = process.env.CHAT_ID;
    const token = process.env.TOKEN_TG;

    if (!chatId || !token) {
      console.error("–û—à–∏–±–∫–∞: CHAT_ID –∏–ª–∏ TOKEN_TG –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.");
      return;
    }

    const orderProducts = await strapi.entityService.findMany(
      "api::order-product.order-product",
      {
        filters: {
          order: result.id,
        },
        populate: ["product"],
      }
    );

    let totalAmount = 0;

      let totalAmountWithSale = 0

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    for (const orderProduct of orderProducts) {
      const { product } = orderProduct;

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      const productDetails = await strapi.entityService.findOne(
        "api::product.product",
        product.id,
        { populate: ["category"] }
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
      orderProduct.product.category = productDetails.category;
    }

    const productsList = orderProducts
      .map((orderProduct, i) => {
        const { product, quantity } = orderProduct;
        const productTotal = product.price * quantity;
        totalAmount += productTotal;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const isSemiFinished = product.category?.name === "–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã";
        const discountRate = isSemiFinished ? 0.85 : 0.80; // 15% –∏–ª–∏ 20%
        const productTotalWithSale =
          totalAmount > optSale ? productTotal * discountRate : productTotal;

        totalAmountWithSale += productTotalWithSale;

        return `${i + 1}. ${product.name} - ${product.price} —Ä—É–±. –ö–æ–ª-–≤–æ: ${
          quantity
        } (–°—É–º–º–∞: ${productTotal} —Ä—É–±.) ${
          totalAmount > optSale
            ? `(–°–æ —Å–∫–∏–¥–∫–æ–π: ${productTotalWithSale.toFixed(2)} —Ä—É–±.)`
            : ""
        }`;
      })
      .join("\n\n");

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ú—è—Å–Ω–æ–º –æ—Å—Ç—Ä–æ–≤–µ!

üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${result.phone}
üöö –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: ${
      result.deliveryMethod === "delivery" ? "–î–æ—Å—Ç–∞–≤–∫–∞" : "–°–∞–º–æ–≤—ã–≤–æ–∑"
    }
üìç –ê–¥—Ä–µ—Å: ${result.address} ${result.floor ? ` —ç—Ç–∞–∂: ${result.floor}` : ""} ${
      result.intercom ? ` –î–æ–º–æ—Ñ–æ–Ω: ${result.intercom}` : ""
    }

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${result.comment || "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}

üõí –ü—Ä–æ–¥—É–∫—Ç—ã:

${productsList}

üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalAmount} —Ä—É–±.
`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    try {
      await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
        chat_id: chatId,
        text: message.trim(),
      });
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:",
        error.response?.data || error.message
      );
    }
  },
};
