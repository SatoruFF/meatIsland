const axios = require("axios");

module.exports = {
  async afterCreate(event) {
    const { result } = event;

    const chatId = process.env.CHAT_ID;
    const token = process.env.TOKEN_TG;

    if (!chatId || !token) {
      console.error("–û—à–∏–±–∫–∞: CHAT_ID –∏–ª–∏ TOKEN_TG –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.");
      return;
    }
    const productsList = result.products
      .map(
        (product, i) =>
          `${i + 1}. ${product.name} - ${product.price} —Ä—É–±. –ö–æ–ª-–≤–æ: ${
            product.weight ? product.weight : 1
          }`
      )
      .join("\n\n");

    const message = `
    üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ú—è—Å–Ω–æ–º –æ—Å—Ç—Ä–æ–≤–µ!

üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${result.phone}
üöö –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: ${
      result.deliveryMethod === "delivery" ? "–î–æ—Å—Ç–∞–≤–∫–∞" : "–°–∞–º–æ–≤—ã–∑–æ–≤"
    }
üìç –ê–¥—Ä–µ—Å: ${result.address} ${result.floor ? ` —ç—Ç–∞–∂: ${result.floor}` : ""} ${
      result.intercom ? ` –¥–æ–º–æ—Ñ–æ–Ω: ${result.intercom}` : ""
    }

üõí –ü—Ä–æ–¥—É–∫—Ç—ã:

${productsList}
        `;

    try {
      await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
        chat_id: chatId,
        text: message.trim(),
      });
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:",
        error.response?.data || error.message
      );
    }
  },
};
